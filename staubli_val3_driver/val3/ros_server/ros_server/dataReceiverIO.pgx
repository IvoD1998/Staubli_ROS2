<?xml version="1.0" encoding="utf-8"?>
<Programs xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://www.staubli.com/robotics/VAL3/Program/2">
  <Program name="dataReceiverIO" access="public">
    <Parameters xmlns="http://www.staubli.com/robotics/VAL3/Param/1">
      <Parameter name="x_sSocket" type="sio" xsi:type="element" use="reference" />
      <Parameter name="x_nConnFlag" type="num" xsi:type="element" use="reference" />
      <Parameter name="x_rMsg" type="RosSimpleMsg" xsi:type="element" use="reference" />
    </Parameters>
    <Locals>
      <Local name="l_nStartTime" type="num" xsi:type="array" size="1" />
      <Local name="l_nMsgRecvState" type="num" xsi:type="array" size="1" />
    </Locals>
    <Code><![CDATA[begin
  // Copyright (c) 2016, Ocado Technology - Robotics Research Team
  //
  // Licensed under the Apache License, Version 2.0 (the "License");
  // you may not use this file except in compliance with the License.
  // You may obtain a copy of the License at
  //
  //     http://www.apache.org/licenses/LICENSE-2.0
  //
  // Unless required by applicable law or agreed to in writing, software
  // distributed under the License is distributed on an "AS IS" BASIS,
  // WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  // See the License for the specific language governing permissions and
  // limitations under the License.



  // state machine at initial state
  // 0: receive header
  // 1: decode header
  // 2: receive body
  // 3: decode body
  // 4: push motion into buffer
  // 5: send ACK
  
  // Set variable constants to make sure they were not changed
  nReset=0
  nRecHeader=0
  nDecHeader=1
  nRecBody=2
  nDecBody=3
  nPushMotion=4
  nAck=5
  
  l_nMsgRecvState=nRecHeader

  while(true)
    // usually for state machines a switch-case statement is a neat implementation
    // HOWEVER, at every iteration of while() this task is sequenced and only called
    // after whatever ms is was defined when created.
    // As a result, receiving one single message, pushing motion and sending ACK
    // would take 6 * task period using switch-case statement.
    // The desirable behaviour is to receive and decode a full message, push motion
    // into buffer and then send ACK to client WITHIN ONE ITERATION of while(),
    // hence the if statement sequence below
    l_nStartTime = clock()
    if(l_nMsgRecvState==nRecHeader)
      call recvMsgHeaderIO(x_sSocket, x_nConnFlag, x_rMsg, l_nMsgRecvState)
    endIf
    
    nHeaderTime = clock() - l_nStartTime
    if(l_nMsgRecvState==nDecHeader)
      call decodeMsgHeaderIO(x_rMsg, l_nMsgRecvState)
      logMsg("Header decoded")
    endIf
    
    if(l_nMsgRecvState==nRecBody)
      call recvMsgBodyIO(x_sSocket, x_nConnFlag, x_rMsg, l_nMsgRecvState)
      logMsg("Body Recv")
    endIf
    
    if(l_nMsgRecvState==nDecBody)
      call decodeMsgBodyIO(x_rMsg, l_nMsgRecvState)
      logMsg("Body decoded")
    endIf
    
    // if(l_nMsgRecvState==nPushMotion)
    //   call pushMotionIO(x_rMsg, l_nMsgRecvState)
    //   logMsg("motion pushed")
    // endIf
    
     if(l_nMsgRecvState==nPushMotion)
      call handleRequest(x_rMsg, l_nMsgRecvState)
      logMsg("request handled")
    endIf
    
    if(l_nMsgRecvState==nAck)
      call encodeAckIO(x_rMsg)
      logMsg("Ack encoded")
      call sendAckIO(x_sSocket, x_nConnFlag, x_rMsg, l_nMsgRecvState)
      logMsg("Ack sent")
    endIf
    nElapsedTime = clock() - l_nStartTime - nHeaderTime
    
    // assert state machine is working OK
    if(l_nMsgRecvState<nRecHeader or l_nMsgRecvState>nAck)
      popUpMsg("Data reception state machine error")
    endIf

    // sequence task
    delay(0)


  endWhile
end]]></Code>
  </Program>
</Programs>