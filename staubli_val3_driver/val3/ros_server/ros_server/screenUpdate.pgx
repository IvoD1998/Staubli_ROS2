<?xml version="1.0" encoding="utf-8"?>
<Programs xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://www.staubli.com/robotics/VAL3/Program/2">
  <Program name="screenUpdate" access="public">
    <Locals>
      <Local name="l_nKey" type="num" xsi:type="array" size="1" />
      <Local name="l_nExecStatus" type="num" xsi:type="array" size="1" />
      <Local name="l_nElems" type="num" xsi:type="array" size="1" />
    </Locals>
    <Code><![CDATA[begin
  // Copyright (c) 2016, Ocado Technology - Robotics Research Team
  //
  // Licensed under the Apache License, Version 2.0 (the "License");
  // you may not use this file except in compliance with the License.
  // You may obtain a copy of the License at
  //
  //     http://www.apache.org/licenses/LICENSE-2.0
  //
  // Unless required by applicable law or agreed to in writing, software
  // distributed under the License is distributed on an "AS IS" BASIS,
  // WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  // See the License for the specific language governing permissions and
  // limitations under the License.

  l_nExecStatus = 0

  call libInterface:init()
  
  while(true)
    
    // clear screen
    call libInterface:clearScreen()
    
    // @TODO: Remove all code related to velocity overwrite
    //    // toggle velocity overwrite upon release of F1 key
    //    l_nKey = getKey(scMonitor)
    //    call libQueueFuncs:getNumElems(qMoveBuffer,l_nElems)
    //    if (l_nKey == 277 and bOverwriteVel == false)
    //      if (l_nElems == 0)
    //        bOverwriteVel = true
    //      else
    //        popUpMsg("Motion buffer not empty; cannot enable V/OW")
    //      endIf
    //    elseIf (l_nKey == 278 and bOverwriteVel == true)
    //      if (l_nElems == 0)
    //        bOverwriteVel = false
    //      else
    //        popUpMsg("Motion buffer not empty; cannot disable V/OW")
    //      endIf
    //    endIf
    
    // update connection status on port 11000
    call libInterface:motionStatus(nInConnFlag)
    
    // update connection status on port 11002
    call libInterface:feedbackStatus(nOutConnFlag)
    
    // update trajectory buffer size
    call libQueueFuncs:getNumElems(qTrajPtBuffer,l_nElems)
    call libInterface:trajBuffer(l_nElems,nPtsPopped)
    
    // do the same for move buffer
    call libQueueFuncs:getNumElems(qMoveBuffer,l_nElems)
    call libInterface:motionBuffer(l_nElems,nPtsPopped)
    
    // display velocity overwrite status
    call libInterface:velOverwrite(bOverwriteVel)
    
    // display nMoveId and nMotionProgress
    call libInterface:motionProgress(nMoveId,nMotionProgress)
    
    // display time between valid trajectory point received and ACK sent
    call libInterface:ack(nHeaderTime,nElapsedTime)
    
    // update debug status
    call libInterface:debug(l_nExecStatus)
    
    //    // add Function keys labels
    //    gotoxy(scMonitor, 30,13)
    //    put(scMonitor, "V/ON")
    //    gotoxy(scMonitor, 35,13)
    //    put(scMonitor, "V/OFF")
    
    // sequence task
    //delay(0)
    delay(0.5)
  endWhile
end]]></Code>
  </Program>
</Programs>