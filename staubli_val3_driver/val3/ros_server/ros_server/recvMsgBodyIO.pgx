<?xml version="1.0" encoding="utf-8"?>
<Programs xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://www.staubli.com/robotics/VAL3/Program/2">
  <Program name="recvMsgBodyIO" access="public">
    <Parameters xmlns="http://www.staubli.com/robotics/VAL3/Param/1">
      <Parameter name="x_sSocket" type="sio" xsi:type="element" use="reference" />
      <Parameter name="x_nConnFlag" type="num" xsi:type="element" use="reference" />
      <Parameter name="x_rMsg" type="RosSimpleMsg" xsi:type="element" use="reference" />
      <Parameter name="x_nMsgRecvState" type="num" xsi:type="element" use="reference" />
    </Parameters>
    <Locals>
      <Local name="l_bFlag" type="bool" xsi:type="array" size="1" />
    </Locals>
    <Code><![CDATA[begin
  // Copyright (c) 2016, Ocado Technology - Robotics Research Team
  //
  // Licensed under the Apache License, Version 2.0 (the "License");
  // you may not use this file except in compliance with the License.
  // You may obtain a copy of the License at
  //
  //     http://www.apache.org/licenses/LICENSE-2.0
  //
  // Unless required by applicable law or agreed to in writing, software
  // distributed under the License is distributed on an "AS IS" BASIS,
  // WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  // See the License for the specific language governing permissions and
  // limitations under the License.

  logMsg("message")
      logMsg(toString("", x_rMsg.header.nData[0]))
      logMsg(toString("", x_rMsg.header.nData[1]))
      logMsg(toString("", x_rMsg.header.nData[2]))
      logMsg(toString("", x_rMsg.header.nData[3]))
      logMsg(toString("", x_rMsg.header.nData[4]))
      logMsg(toString("", x_rMsg.header.nData[5]))
      logMsg(toString("", x_rMsg.header.nData[6]))
      logMsg(toString("", x_rMsg.header.nData[7]))
      logMsg(toString("", x_rMsg.header.nData[8]))
      logMsg(toString("", x_rMsg.header.nData[9]))
      logMsg(toString("", x_rMsg.header.nData[10]))
      logMsg(toString("", x_rMsg.header.nData[11]))
      logMsg("prefix")
      logMsg(toString("", x_rMsg.prefix.nData[0]))
      logMsg(toString("", x_rMsg.prefix.nData[1]))
      logMsg(toString("", x_rMsg.prefix.nData[2]))
      logMsg(toString("", x_rMsg.prefix.nData[3]))
      

  l_bFlag=false
  ntest = x_rMsg.header.nMsgType
  sTest = toString("", ntest)
  //logMsg(stest)
  //switch x_rMsg.header.nMsgType
  //  case nStdMsgType["JOINT_TRAJ_PT"]
  //    call recvTrajPt(l_bFlag)
  //  break
  //  case nStdMsgType["JOINT_TRAJ_PT_FULL"]
  //    call recvTrajPtFull(l_bFlag)
  //  break
  //  case Staubli:MsgType.WRITE_SINGLE_IO
      call recvRosMsg (x_sSocket,Staubli:writeSingIOMsg.prefix,Staubli:writeSingIOMsg.header,Staubli:writeSingIOMsg.body,x_nConnFlag, x_rMsg, l_bFlag)
  //  break
  //  default
  //  break
  //endSwitch

  if (l_bFlag == true)
    // move on to state 3: decode msg body
    x_nMsgRecvState=nDecBody
  else
    // error whilst receiving msg body, reset state machine
    x_nMsgRecvState=nReset
  endIf
end]]></Code>
  </Program>
</Programs>