<?xml version="1.0" encoding="utf-8"?>
<Programs xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://www.staubli.com/robotics/VAL3/Program/2">
  <Program name="decodeMsgHeader" access="public">
    <Parameters xmlns="http://www.staubli.com/robotics/VAL3/Param/1">
      <Parameter name="x_nMsgRecvState" type="num" xsi:type="element" use="reference" />
    </Parameters>
    <Locals>
      <Local name="l_nRetVal" type="num" xsi:type="array" size="1" />
    </Locals>
    <Code><![CDATA[begin
  // Copyright (c) 2016, Ocado Technology - Robotics Research Team
  //
  // Licensed under the Apache License, Version 2.0 (the "License");
  // you may not use this file except in compliance with the License.
  // You may obtain a copy of the License at
  //
  //     http://www.apache.org/licenses/LICENSE-2.0
  //
  // Unless required by applicable law or agreed to in writing, software
  // distributed under the License is distributed on an "AS IS" BASIS,
  // WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  // See the License for the specific language governing permissions and
  // limitations under the License.



  // decode message into generic message first
  l_nRetVal=fromBinary(rosGenericMsg.prefix.nData,4,"-4l",rosGenericMsg.prefix.nLength)
  if (l_nRetVal!=1)
    // error decoding prefix, reset state machine
    x_nMsgRecvState=nReset
    return
  endIf
  l_nRetVal=fromBinary(rosGenericMsg.header.nData,4,"-4l",rosGenericMsg.header.nMsgType)
  if (l_nRetVal!=1)
    // error decoding header (msg type), reset state machine
    x_nMsgRecvState=nReset
    return
  endIf
  l_nRetVal=fromBinary(rosGenericMsg.header.nData[4],4,"-4l",rosGenericMsg.header.nCommType)
  if (l_nRetVal!=1)
    // error decoding header (comm type), reset state machine
    x_nMsgRecvState=nReset
    return
  endIf
  l_nRetVal=fromBinary(rosGenericMsg.header.nData[8],4,"-4l",rosGenericMsg.header.nReplyCode)
  if (l_nRetVal!=1)
    // error decoding header (reply code), reset state machine
    x_nMsgRecvState=nReset
    return
  endIf

  // no errors detected whilst decoding prefix and header
  // move on to state 2: receive msg body
  x_nMsgRecvState=nRecBody
end
]]></Code>
  </Program>
</Programs>