<?xml version="1.0" encoding="utf-8"?>
<Programs xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://www.staubli.com/robotics/VAL3/Program/2">
  <Program name="decodeMsgBody" access="public">
    <Parameters xmlns="http://www.staubli.com/robotics/VAL3/Param/1">
      <Parameter name="x_msg" type="RosSimpleMsg" xsi:type="element" use="reference" />
      <Parameter name="x_nMsgRecvState" type="num" xsi:type="element" use="reference" />
    </Parameters>
    <Locals>
      <Local name="l_bFlag" type="bool" xsi:type="array" size="1" />
    </Locals>
    <Code><![CDATA[begin
  // Copyright (c) 2016, Ocado Technology - Robotics Research Team
  // Copyright (c) 2021, Institute for Factory Automation and Production Systems (FAPS)
  //
  // Licensed under the Apache License, Version 2.0 (the "License");
  // you may not use this file except in compliance with the License.
  // You may obtain a copy of the License at
  //
  //     http://www.apache.org/licenses/LICENSE-2.0
  //
  // Unless required by applicable law or agreed to in writing, software
  // distributed under the License is distributed on an "AS IS" BASIS,
  // WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  // See the License for the specific language governing permissions and
  // limitations under the License.


  // assume failure to decode
  l_bFlag=false

  //region @decode -- call specific decode function
  switch x_msg.header.nMsgType
    case SimpleMsg:MsgType.JOINT_TRAJ_PT
      call decTrajPt(l_bFlag)
    break
    case SimpleMsg:MsgType.JOINT_TRAJ_PT_F
      call decTrajPtFull(l_bFlag)
    break
    // Staubli specific
    case Staubli:MsgType.SET_DRIVE_POWER
      call Staubli:decSetDrvPwrMsg(l_bFlag)
    break
    case Staubli:MsgType.WRITE_SINGLE_IO
      call Staubli:decWriSingIOMsg(l_bFlag)
    break
    case Staubli:MsgType.VELOCITY_CFG
      call Staubli:decodeVelCfg(l_bFlag)
    break
    case Staubli:MsgType.VELOCITY_CMD
      call Staubli:decodeVelCmd(l_bFlag)
    break
    default
      //region @DEBUG
      if (bDebugMode and nDebugLevel<=3)
        //call printDebug("ERROR: unknown msg type ("+toString("",x_msg.header.nMsgType)+")",false)
        //call printDebug("       could not decode message",false)
      endIf
      //endregion
    break
  endSwitch
  //endregion

  //region @check_success -- check whether decoding was successful and move on to the next state
  if (l_bFlag == true)
    switch x_msg.header.nMsgType
      case SimpleMsg:MsgType.JOINT_TRAJ_PT,SimpleMsg:MsgType.JOINT_TRAJ_PT_F,Staubli:MsgType.VELOCITY_CFG,Staubli:MsgType.VELOCITY_CMD
        // move on to state: push motion into buffer
        x_nMsgRecvState = MsgRecvState.PUSH_MOTION
      break
      case Staubli:MsgType.SET_DRIVE_POWER, Staubli:MsgType.WRITE_SINGLE_IO
        // move on to state: handle system/io request
        x_nMsgRecvState = MsgRecvState.HANDLE_REQUEST
      break
    endSwitch

    //region @DEBUG
    if (bDebugMode and nDebugLevel<=3)
      //call printDebug("INFO: decoding successful",false)
    endIf
    //endregion
  else
    // error whilst decoding msg body...
    if (x_msg.header.nCommType==SimpleMsg:CommType.SERVICE_REQUEST)
      // set reply code if comm type is request
      switch x_msg.header.nMsgType
        case SimpleMsg:MsgType.JOINT_TRAJ_PT
          rosTrajPtAck.header.nReplyCode=SimpleMsg:ReplyCode.FAILURE
        break
        case SimpleMsg:MsgType.JOINT_TRAJ_PT_F
          rosTrajPtFAck.header.nReplyCode=SimpleMsg:ReplyCode.FAILURE
        break
        // Staubli specific
        case Staubli:MsgType.SET_DRIVE_POWER
          Staubli:setDrvPwrAck.header.nReplyCode=SimpleMsg:ReplyCode.FAILURE
        break
        case Staubli:MsgType.WRITE_SINGLE_IO
          Staubli:writeSingIOAck.header.nReplyCode=SimpleMsg:ReplyCode.FAILURE
        break
        case Staubli:MsgType.VELOCITY_CFG
          Staubli:velCfgAck.header.nReplyCode=SimpleMsg:ReplyCode.FAILURE
        break
        case Staubli:MsgType.VELOCITY_CMD
          Staubli:velCmdAck.header.nReplyCode=SimpleMsg:ReplyCode.FAILURE
        break
        default
          //region @DEBUG
          if (bDebugMode and nDebugLevel<=3)
            //call printDebug("ERROR: unknown msg type ("+toString("",x_msg.header.nMsgType)+")",false)
            //call printDebug("       could not set reply code",false)
          endIf
          //endregion
        break
      endSwitch
      // jump to state 6: sendAck()
      x_nMsgRecvState = MsgRecvState.SEND_ACK
    else
      // reset state machine, since no ACK is required
      x_nMsgRecvState = MsgRecvState.RECEIVE_HEADER
    endIf
    //region @DEBUG
    if (bDebugMode and nDebugLevel<=3)
      //call printDebug("ERROR: decoding not successful",false)
    endIf
    //endregion
  endIf
  //endregion
end]]></Code>
  </Program>
</Programs>