<?xml version="1.0" encoding="utf-8"?>
<Programs xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://www.staubli.com/robotics/VAL3/Program/2">
  <Program name="start">
    <Locals>
      <Local name="l_nFbkPeriod" type="num" xsi:type="array" size="1" />
      <Local name="l_nRecvPeriod" type="num" xsi:type="array" size="1" />
      <Local name="l_nScreenUpdate" type="num" xsi:type="array" size="1" />
    </Locals>
    <Code><![CDATA[begin 
  // Copyright (c) 2016, Ocado Technology - Robotics Research Team
  // Copyright (c) 2021, Institute for Factory Automation and Production Systems (FAPS)
  //
  // Licensed under the Apache License, Version 2.0 (the "License");
  // you may not use this file except in compliance with the License.
  // You may obtain a copy of the License at
  //
  //     http://www.apache.org/licenses/LICENSE-2.0
  //
  // Unless required by applicable law or agreed to in writing, software
  // distributed under the License is distributed on an "AS IS" BASIS,
  // WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  // See the License for the specific language governing permissions and
  // limitations under the License.



  // feedback task will run every 4ms (250Hz)
  l_nFbkPeriod=0.004

  // motion control task will run every 4ms (250Hz)
  nMotionPeriod=0.004

  // data (trajectory) reception task will run every 4ms (250Hz)
  l_nRecvPeriod=0.004

  // screen update task will run every 100ms (10Hz)
  l_nScreenUpdate=0.1

  sStreamerTask="streamerTask"
  sMotionRecvTask="motionRecvTask"
  sMotionTask="motionTask"
  sSysRequestTask="sysRequestTask"
  sIORequestTask="ioRequestTask"
  sStateMachTask="stateMachTask"
  sScreenTask="screenTask"
  sHeartbeatTask="htbtTask"

  // initialize TCP/IP parameters and MsgRecvState enum
  call initParams()

  // initialize libraries (must init SimpleMsg first! Staubli is dependent on SimpleMsg)
  call SimpleMsg:init()
  call Staubli:init()
  call IO:init()
  // setup prefix and header of ROS messages
  call initRosMsgs()

  // set standard motion mode
  nMotionMode=Staubli:MotionMode.JOINT_TRAJ

  // socket connection status flags: initially disconnected
  nConnFlagIO = 0
  nConnFlagMotion = 0
  nConnFlagState = 0
  nConnFlagSystem = 0

  // flags defining whether data being received/sent
  bDataIn = false
  bDataOut = false

  // flag defining whether velocity to be overwritten to max. vel.
  bOverwriteVel = false

  nPtsPopped=0
  nMovePts=0

  // flush buffers of sockets
  clearBuffer(siTcpIpIO)
  clearBuffer(siTcpIpMotion)
  clearBuffer(siTcpIpState)
  clearBuffer(siTcpIpSystem)

  // check if robot is not in emergency stop and wait until estop is reset
  if (esStatus() == 2)
    popUpMsg("Please reset E-Stop")
    wait(esStatus() < 2)
  endIf
  
  // before anything else, enable power (only works if robot is in remote mode)
  if (!isPowered())
    if (workingMode() >= 4)
      do
        enablePower()
        delay(2)
      until isPowered()
    else
      popUpMsg("Power must be enabled manually")
    endIf
  endIf
  
  // reset motion, potentially setting a start joint position for calling autoConnect() in the future
  resetMotion()

  // create joint state and robot status streamer task to send data to industrial_robot_client
  taskCreateSync sStreamerTask, l_nFbkPeriod, bFbkOverrun, dataStreamer()

  // create receiver task for motion commands (e.g. from industrial_robot_client)
  taskCreateSync sMotionRecvTask, l_nRecvPeriod, bRecvOverrun, dataReceiver(siTcpIpMotion, nConnFlagMotion, genericMotMsg)

  // create motion task to synchronously apply motion commands to robot
  taskCreateSync sMotionTask, nMotionPeriod, bMotionOverrun, motionControl()

  // create asynchronous task to handle state transition
  taskCreate sStateMachTask, 100, stateMachine()

  // create asynchronous task to handle system requests
  taskCreate sSysRequestTask, 100, dataReceiver(siTcpIpSystem, nConnFlagSystem, genericSysMsg)

  // create asynchronous task to handle io requests
  taskCreate sIORequestTask, 100, dataReceiver(siTcpIpIO, nConnFlagIO, genericIOMsg)

  // create asynchronous task to update screen
  //taskCreate sScreenTask, 10, screenUpdate(l_nScreenUpdate)

  // create asynchronous task to receive heartbeat on port 11002
  taskCreate sHeartbeatTask, 10, recvHeartbeat()

end]]></Code>
  </Program>
</Programs>