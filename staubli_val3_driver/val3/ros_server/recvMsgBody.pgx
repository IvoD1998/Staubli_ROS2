<?xml version="1.0" encoding="utf-8"?>
<Programs xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://www.staubli.com/robotics/VAL3/Program/2">
  <Program name="recvMsgBody" access="public">
    <Parameters xmlns="http://www.staubli.com/robotics/VAL3/Param/1">
      <Parameter name="x_sSocket" type="sio" xsi:type="element" use="reference" />
      <Parameter name="x_nConnFlag" type="num" xsi:type="element" use="reference" />
      <Parameter name="x_msg" type="RosSimpleMsg" xsi:type="element" use="reference" />
      <Parameter name="x_nMsgRecvState" type="num" xsi:type="element" use="reference" />
    </Parameters>
    <Locals>
      <Local name="l_bFlag" type="bool" xsi:type="array" size="1" />
    </Locals>
    <Code><![CDATA[begin
  // Copyright (c) 2016, Ocado Technology - Robotics Research Team
  // Copyright (c) 2021, Institute for Factory Automation and Production Systems (FAPS)
  //
  // Licensed under the Apache License, Version 2.0 (the "License");
  // you may not use this file except in compliance with the License.
  // You may obtain a copy of the License at
  //
  //     http://www.apache.org/licenses/LICENSE-2.0
  //
  // Unless required by applicable law or agreed to in writing, software
  // distributed under the License is distributed on an "AS IS" BASIS,
  // WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  // See the License for the specific language governing permissions and
  // limitations under the License.



  l_bFlag=false

  switch x_msg.header.nMsgType
    // standard ROS industrial messages
    case SimpleMsg:MsgType.JOINT_TRAJ_PT
      call recvTrajPt(x_sSocket, x_nConnFlag, x_msg, l_bFlag)
    break
    case SimpleMsg:MsgType.JOINT_TRAJ_PT_F
      call recvTrajPtFull(x_sSocket,x_nConnFlag,x_msg,l_bFlag)
    break
    // Staubli specific
    case Staubli:MsgType.SET_DRIVE_POWER
      call recvRosMsg(x_sSocket, Staubli:setDrvPwrMsg.prefix, Staubli:setDrvPwrMsg.header, Staubli:setDrvPwrMsg.body, x_nConnFlag, x_msg, l_bFlag)
    break
    case Staubli:MsgType.WRITE_SINGLE_IO
      call recvRosMsg(x_sSocket, Staubli:writeSingIOMsg.prefix, Staubli:writeSingIOMsg.header, Staubli:writeSingIOMsg.body, x_nConnFlag, x_msg, l_bFlag)
    break
    case Staubli:MsgType.VELOCITY_CFG
      call recvRosMsg(x_sSocket, Staubli:velCfgMsg.prefix, Staubli:velCfgMsg.header, Staubli:velCfgMsg.body, x_nConnFlag, x_msg, l_bFlag)
    break
    case Staubli:MsgType.VELOCITY_CMD
      call recvRosMsg(x_sSocket, Staubli:velCmdMsg.prefix, Staubli:velCmdMsg.header, Staubli:velCmdMsg.body, x_nConnFlag, x_msg, l_bFlag)
    break
    default
      if (bDebugMode and nDebugLevel<=2)
        //call printDebug("ERROR: unknown msg type ("+toString("",x_msg.header.nMsgType)+")",false)
      endIf
    break
  endSwitch

  if (l_bFlag == true)
    // move on to state 3: decode msg body
    x_nMsgRecvState = MsgRecvState.DECODE_BODY

    // debug
    if (bDebugMode and nDebugLevel<=2)
      //call printDebug("INFO: receiving successful",false)
    endIf
  else
    // error whilst receiving msg body, reset state machine
    x_nMsgRecvState = MsgRecvState.RECEIVE_HEADER
    clearBuffer(x_sSocket)

    // debug
    if (bDebugMode and nDebugLevel<=2)
      //call printDebug("ERROR: receiving not successful",false)
    endIf
  endIf
end]]></Code>
  </Program>
</Programs>