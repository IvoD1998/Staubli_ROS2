<?xml version="1.0" encoding="utf-8" ?>
<Programs xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://www.staubli.com/robotics/VAL3/Program/2" >
  <Program name="decodeVelCfg" access="public" >
    <Parameters xmlns="http://www.staubli.com/robotics/VAL3/Param/1" >
      <Parameter name="x_bFlag" type="bool" use="reference" xsi:type="element" dimensions="1" />
    </Parameters>
    <Locals>
      <Local name="l_nIndex" type="num" xsi:type="array" size="1" />
      <Local name="l_nRetVal" type="num" xsi:type="array" size="1" />
    </Locals>
    <Code><![CDATA[begin
  // Copyright (c) 2021, Institute for Factory Automation and Production Systems (FAPS)
  //
  // Licensed under the Apache License, Version 2.0 (the "License");
  // you may not use this file except in compliance with the License.
  // You may obtain a copy of the License at
  //
  //     http://www.apache.org/licenses/LICENSE-2.0
  //
  // Unless required by applicable law or agreed to in writing, software
  // distributed under the License is distributed on an "AS IS" BASIS,
  // WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  // See the License for the specific language governing permissions and
  // limitations under the License.


  // decode velocity configuration message body (data)

  // assume failure to decode
  velCfgAck.header.nReplyCode=SimpleMsg:ReplyCode.FAILURE


  // command type (frame or joint), 4 bytes
  l_nRetVal=fromBinary(velCfgMsg.body.nData,4,"-4l",velCfgMsg.velCfg.nCmdType)
  if (l_nRetVal!=1)
    x_bFlag=false
    return
  endIf

  // reference frame vector [6], 24 bytes
  for l_nIndex=0 to 5 step 1
    l_nRetVal=fromBinary(velCfgMsg.body.nData[(l_nIndex*4)+4],4,"4.0l",velCfgMsg.velCfg.nRefFrameVec[l_nIndex])
    if (l_nRetVal!=1)
      x_bFlag=false
      return
    endIf
  endFor

  // target tool vector [6], 24 bytes
  for l_nIndex=0 to 5 step 1
    l_nRetVal=fromBinary(velCfgMsg.body.nData[(l_nIndex*4)+28],4,"4.0l",velCfgMsg.velCfg.nToolVec[l_nIndex])
    if (l_nRetVal!=1)
      x_bFlag=false
      return
    endIf
  endFor

  // acceleration, 4 bytes
  l_nRetVal=fromBinary(velCfgMsg.body.nData[52],4,"4.0l",velCfgMsg.velCfg.nAccel)
  if (l_nRetVal!=1)
    x_bFlag=false
    return
  endIf

  // velocity, 4 bytes
  l_nRetVal=fromBinary(velCfgMsg.body.nData[56],4,"4.0l",velCfgMsg.velCfg.nVel)
  if (l_nRetVal!=1)
    x_bFlag=false
    return
  endIf

  // translational velocity, 4 bytes
  l_nRetVal=fromBinary(velCfgMsg.body.nData[60],4,"4.0l",velCfgMsg.velCfg.nTransVel)
  if (l_nRetVal!=1)
    x_bFlag=false
    return
  endIf

  // rotational velocity, 4 bytes
  l_nRetVal=fromBinary(velCfgMsg.body.nData[64],4,"4.0l",velCfgMsg.velCfg.nRotVel)
  if (l_nRetVal!=1)
    x_bFlag=false
    return
  endIf


  // decoding successful
  velCfgAck.header.nReplyCode=SimpleMsg:ReplyCode.SUCCESS
  velCfgAck.velCfg.nCmdType=velCfgMsg.velCfg.nCmdType
  x_bFlag=true
end]]></Code>
  </Program>
</Programs>